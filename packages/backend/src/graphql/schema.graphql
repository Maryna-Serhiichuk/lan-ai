### This file was generated by Nexus Schema
### Do not make changes to this file directly


input BooleanFilterInput {
  and: [Boolean]
  between: [Boolean]
  contains: Boolean
  containsi: Boolean
  endsWith: Boolean
  eq: Boolean
  eqi: Boolean
  gt: Boolean
  gte: Boolean
  in: [Boolean]
  lt: Boolean
  lte: Boolean
  ne: Boolean
  nei: Boolean
  not: BooleanFilterInput
  notContains: Boolean
  notContainsi: Boolean
  notIn: [Boolean]
  notNull: Boolean
  null: Boolean
  or: [Boolean]
  startsWith: Boolean
}

type ComponentContextDynamic {
  id: ID!
  language: String
  level: String
  native: String
  study: String
  tenses: String
  theme: String
  words: String
}

input ComponentContextDynamicFiltersInput {
  and: [ComponentContextDynamicFiltersInput]
  language: StringFilterInput
  level: StringFilterInput
  native: StringFilterInput
  not: ComponentContextDynamicFiltersInput
  or: [ComponentContextDynamicFiltersInput]
  study: StringFilterInput
  tenses: StringFilterInput
  theme: StringFilterInput
  words: StringFilterInput
}

input ComponentContextDynamicInput {
  id: ID
  language: String
  level: String
  native: String
  study: String
  tenses: String
  theme: String
  words: String
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

input DateFilterInput {
  and: [Date]
  between: [Date]
  contains: Date
  containsi: Date
  endsWith: Date
  eq: Date
  eqi: Date
  gt: Date
  gte: Date
  in: [Date]
  lt: Date
  lte: Date
  ne: Date
  nei: Date
  not: DateFilterInput
  notContains: Date
  notContainsi: Date
  notIn: [Date]
  notNull: Boolean
  null: Boolean
  or: [Date]
  startsWith: Date
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input DateTimeFilterInput {
  and: [DateTime]
  between: [DateTime]
  contains: DateTime
  containsi: DateTime
  endsWith: DateTime
  eq: DateTime
  eqi: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  ne: DateTime
  nei: DateTime
  not: DateTimeFilterInput
  notContains: DateTime
  notContainsi: DateTime
  notIn: [DateTime]
  notNull: Boolean
  null: Boolean
  or: [DateTime]
  startsWith: DateTime
}

enum ENUM_SETTING_LANGUAGE {
  english
}

enum ENUM_SETTING_LEVEL {
  A1
  A2
  B1
  B2
  C1
  C2
}

type Error {
  code: String!
  message: String
}

input FileInfoInput {
  alternativeText: String
  caption: String
  name: String
}

input FloatFilterInput {
  and: [Float]
  between: [Float]
  contains: Float
  containsi: Float
  endsWith: Float
  eq: Float
  eqi: Float
  gt: Float
  gte: Float
  in: [Float]
  lt: Float
  lte: Float
  ne: Float
  nei: Float
  not: FloatFilterInput
  notContains: Float
  notContainsi: Float
  notIn: [Float]
  notNull: Boolean
  null: Boolean
  or: [Float]
  startsWith: Float
}

union GenericMorph = ComponentContextDynamic | I18NLocale | List | Prompt | Setting | UploadFile | UploadFolder | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsUser | Variable | Word

type I18NLocale {
  code: String
  createdAt: DateTime
  name: String
  updatedAt: DateTime
}

"""A string used to identify an i18n locale"""
scalar I18NLocaleCode

type I18NLocaleEntity {
  attributes: I18NLocale
  id: ID
}

type I18NLocaleEntityResponse {
  data: I18NLocaleEntity
}

type I18NLocaleEntityResponseCollection {
  data: [I18NLocaleEntity!]!
  meta: ResponseCollectionMeta!
}

input I18NLocaleFiltersInput {
  and: [I18NLocaleFiltersInput]
  code: StringFilterInput
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: I18NLocaleFiltersInput
  or: [I18NLocaleFiltersInput]
  updatedAt: DateTimeFilterInput
}

input I18NLocaleInput {
  code: String
  name: String
}

type I18NLocaleRelationResponseCollection {
  data: [I18NLocaleEntity!]!
}

input IDFilterInput {
  and: [ID]
  between: [ID]
  contains: ID
  containsi: ID
  endsWith: ID
  eq: ID
  eqi: ID
  gt: ID
  gte: ID
  in: [ID]
  lt: ID
  lte: ID
  ne: ID
  nei: ID
  not: IDFilterInput
  notContains: ID
  notContainsi: ID
  notIn: [ID]
  notNull: Boolean
  null: Boolean
  or: [ID]
  startsWith: ID
}

input IntFilterInput {
  and: [Int]
  between: [Int]
  contains: Int
  containsi: Int
  endsWith: Int
  eq: Int
  eqi: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  ne: Int
  nei: Int
  not: IntFilterInput
  notContains: Int
  notContainsi: Int
  notIn: [Int]
  notNull: Boolean
  null: Boolean
  or: [Int]
  startsWith: Int
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

input JSONFilterInput {
  and: [JSON]
  between: [JSON]
  contains: JSON
  containsi: JSON
  endsWith: JSON
  eq: JSON
  eqi: JSON
  gt: JSON
  gte: JSON
  in: [JSON]
  lt: JSON
  lte: JSON
  ne: JSON
  nei: JSON
  not: JSONFilterInput
  notContains: JSON
  notContainsi: JSON
  notIn: [JSON]
  notNull: Boolean
  null: Boolean
  or: [JSON]
  startsWith: JSON
}

type List {
  closed: Boolean
  createdAt: DateTime
  name: String
  setting: SettingEntityResponse
  updatedAt: DateTime
  words(filters: WordFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): WordRelationResponseCollection
}

type ListEntity {
  attributes: List
  id: ID
}

type ListEntityResponse {
  data: ListEntity
}

type ListEntityResponseCollection {
  data: [ListEntity!]!
  meta: ResponseCollectionMeta!
}

input ListFiltersInput {
  and: [ListFiltersInput]
  closed: BooleanFilterInput
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: ListFiltersInput
  or: [ListFiltersInput]
  setting: SettingFiltersInput
  updatedAt: DateTimeFilterInput
  words: WordFiltersInput
}

input ListInput {
  closed: Boolean
  name: String
  setting: ID
  words: [ID]
}

type ListRelationResponseCollection {
  data: [ListEntity!]!
}

"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
"""
scalar Long

input LongFilterInput {
  and: [Long]
  between: [Long]
  contains: Long
  containsi: Long
  endsWith: Long
  eq: Long
  eqi: Long
  gt: Long
  gte: Long
  in: [Long]
  lt: Long
  lte: Long
  ne: Long
  nei: Long
  not: LongFilterInput
  notContains: Long
  notContainsi: Long
  notIn: [Long]
  notNull: Boolean
  null: Boolean
  or: [Long]
  startsWith: Long
}

type Mutation {
  """Change user password. Confirm with the current password."""
  changePassword(currentPassword: String!, password: String!, passwordConfirmation: String!): UsersPermissionsLoginPayload
  changeWordsPoint(input: [WordsPointListInput]): WordEntityResponseCollection
  checkSentences(data: [SentenceInput]): SentencesResultResponse
  createList(data: ListInput!): ListEntityResponse
  createPrompt(data: PromptInput!): PromptEntityResponse
  createSetting(data: SettingInput!): SettingEntityResponse
  createUploadFile(data: UploadFileInput!): UploadFileEntityResponse
  createUploadFolder(data: UploadFolderInput!): UploadFolderEntityResponse

  """Create a new role"""
  createUsersPermissionsRole(data: UsersPermissionsRoleInput!): UsersPermissionsCreateRolePayload

  """Create a new user"""
  createUsersPermissionsUser(data: UsersPermissionsUserInput!): UsersPermissionsUserEntityResponse!
  createWord(data: WordInput!): WordEntityResponse
  createWordsList(input: WordsListInput!): ListEntityResponse
  deleteList(id: ID!): ListEntityResponse
  deletePrompt(id: ID!): PromptEntityResponse
  deleteSetting(id: ID!): SettingEntityResponse
  deleteUploadFile(id: ID!): UploadFileEntityResponse
  deleteUploadFolder(id: ID!): UploadFolderEntityResponse

  """Delete an existing role"""
  deleteUsersPermissionsRole(id: ID!): UsersPermissionsDeleteRolePayload

  """Delete an existing user"""
  deleteUsersPermissionsUser(id: ID!): UsersPermissionsUserEntityResponse!
  deleteVariable: VariableEntityResponse
  deleteWord(id: ID!): WordEntityResponse

  """Confirm an email users email address"""
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload

  """Request a reset password token"""
  forgotPassword(email: String!): UsersPermissionsPasswordPayload
  getSentences(id: ID!): SentencesResponse
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  multipleUpload(field: String, files: [Upload]!, ref: String, refId: ID): [UploadFileEntityResponse]!

  """Register a user"""
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
  removeFile(id: ID!): UploadFileEntityResponse

  """
  Reset user password. Confirm with a code (resetToken from forgotPassword)
  """
  resetPassword(code: String!, password: String!, passwordConfirmation: String!): UsersPermissionsLoginPayload
  updateFileInfo(id: ID!, info: FileInfoInput): UploadFileEntityResponse!
  updateList(data: ListInput!, id: ID!): ListEntityResponse
  updatePrompt(data: PromptInput!, id: ID!): PromptEntityResponse
  updateSetting(data: SettingInput!, id: ID!): SettingEntityResponse
  updateUploadFile(data: UploadFileInput!, id: ID!): UploadFileEntityResponse
  updateUploadFolder(data: UploadFolderInput!, id: ID!): UploadFolderEntityResponse

  """Update an existing role"""
  updateUsersPermissionsRole(data: UsersPermissionsRoleInput!, id: ID!): UsersPermissionsUpdateRolePayload

  """Update an existing user"""
  updateUsersPermissionsUser(data: UsersPermissionsUserInput!, id: ID!): UsersPermissionsUserEntityResponse!
  updateVariable(data: VariableInput!): VariableEntityResponse
  updateWord(data: WordInput!, id: ID!): WordEntityResponse
  updateWordsPoints: WordEntityResponseCollection
  upload(field: String, file: Upload!, info: FileInfoInput, ref: String, refId: ID): UploadFileEntityResponse!
}

type Pagination {
  page: Int!
  pageCount: Int!
  pageSize: Int!
  total: Int!
}

input PaginationArg {
  limit: Int
  page: Int
  pageSize: Int
  start: Int
}

type Prompt {
  ask: String
  check: String
  createdAt: DateTime
  description: String
  name: String
  publishedAt: DateTime
  updatedAt: DateTime
  variable: ComponentContextDynamic
}

type PromptEntity {
  attributes: Prompt
  id: ID
}

type PromptEntityResponse {
  data: PromptEntity
}

type PromptEntityResponseCollection {
  data: [PromptEntity!]!
  meta: ResponseCollectionMeta!
}

input PromptFiltersInput {
  and: [PromptFiltersInput]
  ask: StringFilterInput
  check: StringFilterInput
  createdAt: DateTimeFilterInput
  description: StringFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: PromptFiltersInput
  or: [PromptFiltersInput]
  publishedAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  variable: ComponentContextDynamicFiltersInput
}

input PromptInput {
  ask: String
  check: String
  description: String
  name: String
  publishedAt: DateTime
  variable: ComponentContextDynamicInput
}

type PromptRelationResponseCollection {
  data: [PromptEntity!]!
}

enum PublicationState {
  LIVE
  PREVIEW
}

type Query {
  i18NLocale(id: ID): I18NLocaleEntityResponse
  i18NLocales(filters: I18NLocaleFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): I18NLocaleEntityResponseCollection
  list(id: ID): ListEntityResponse
  lists(filters: ListFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): ListEntityResponseCollection
  me: UsersPermissionsUser
  prompt(id: ID): PromptEntityResponse
  prompts(filters: PromptFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): PromptEntityResponseCollection
  setting(id: ID): SettingEntityResponse
  settings(filters: SettingFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): SettingEntityResponseCollection
  uploadFile(id: ID): UploadFileEntityResponse
  uploadFiles(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileEntityResponseCollection
  uploadFolder(id: ID): UploadFolderEntityResponse
  uploadFolders(filters: UploadFolderFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFolderEntityResponseCollection
  usersPermissionsRole(id: ID): UsersPermissionsRoleEntityResponse
  usersPermissionsRoles(filters: UsersPermissionsRoleFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsRoleEntityResponseCollection
  usersPermissionsUser(id: ID): UsersPermissionsUserEntityResponse
  usersPermissionsUsers(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsUserEntityResponseCollection
  variable: VariableEntityResponse
  word(id: ID): WordEntityResponse
  words(filters: WordFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): WordEntityResponseCollection
}

type ResponseCollectionMeta {
  pagination: Pagination!
}

type Sentence {
  text: String
}

input SentenceInput {
  id: ID
  original: String
  sentences: String
}

type SentenceResponse {
  explain: String
  id: ID
}

type SentencesResponse {
  data: [Sentence]
}

type SentencesResultResponse {
  data: [SentenceResponse]
}

type Setting {
  account: UsersPermissionsUserEntityResponse
  createdAt: DateTime
  language: ENUM_SETTING_LANGUAGE
  level: ENUM_SETTING_LEVEL
  lists(filters: ListFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): ListRelationResponseCollection
  name: String
  tenses: String
  theme: String
  updatedAt: DateTime
  user: UsersPermissionsUserEntityResponse
}

type SettingEntity {
  attributes: Setting
  id: ID
}

type SettingEntityResponse {
  data: SettingEntity
}

type SettingEntityResponseCollection {
  data: [SettingEntity!]!
  meta: ResponseCollectionMeta!
}

input SettingFiltersInput {
  account: UsersPermissionsUserFiltersInput
  and: [SettingFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  language: StringFilterInput
  level: StringFilterInput
  lists: ListFiltersInput
  name: StringFilterInput
  not: SettingFiltersInput
  or: [SettingFiltersInput]
  tenses: StringFilterInput
  theme: StringFilterInput
  updatedAt: DateTimeFilterInput
  user: UsersPermissionsUserFiltersInput
}

input SettingInput {
  account: ID
  language: ENUM_SETTING_LANGUAGE
  level: ENUM_SETTING_LEVEL
  lists: [ID]
  name: String
  tenses: String
  theme: String
  user: ID
}

type SettingRelationResponseCollection {
  data: [SettingEntity!]!
}

input StringFilterInput {
  and: [String]
  between: [String]
  contains: String
  containsi: String
  endsWith: String
  eq: String
  eqi: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  nei: String
  not: StringFilterInput
  notContains: String
  notContainsi: String
  notIn: [String]
  notNull: Boolean
  null: Boolean
  or: [String]
  startsWith: String
}

"""A time string with format HH:mm:ss.SSS"""
scalar Time

input TimeFilterInput {
  and: [Time]
  between: [Time]
  contains: Time
  containsi: Time
  endsWith: Time
  eq: Time
  eqi: Time
  gt: Time
  gte: Time
  in: [Time]
  lt: Time
  lte: Time
  ne: Time
  nei: Time
  not: TimeFilterInput
  notContains: Time
  notContainsi: Time
  notIn: [Time]
  notNull: Boolean
  null: Boolean
  or: [Time]
  startsWith: Time
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadFile {
  alternativeText: String
  caption: String
  createdAt: DateTime
  ext: String
  formats: JSON
  hash: String!
  height: Int
  mime: String!
  name: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [GenericMorph]
  size: Float!
  updatedAt: DateTime
  url: String!
  width: Int
}

type UploadFileEntity {
  attributes: UploadFile
  id: ID
}

type UploadFileEntityResponse {
  data: UploadFileEntity
}

type UploadFileEntityResponseCollection {
  data: [UploadFileEntity!]!
  meta: ResponseCollectionMeta!
}

input UploadFileFiltersInput {
  alternativeText: StringFilterInput
  and: [UploadFileFiltersInput]
  caption: StringFilterInput
  createdAt: DateTimeFilterInput
  ext: StringFilterInput
  folder: UploadFolderFiltersInput
  folderPath: StringFilterInput
  formats: JSONFilterInput
  hash: StringFilterInput
  height: IntFilterInput
  id: IDFilterInput
  mime: StringFilterInput
  name: StringFilterInput
  not: UploadFileFiltersInput
  or: [UploadFileFiltersInput]
  previewUrl: StringFilterInput
  provider: StringFilterInput
  provider_metadata: JSONFilterInput
  size: FloatFilterInput
  updatedAt: DateTimeFilterInput
  url: StringFilterInput
  width: IntFilterInput
}

input UploadFileInput {
  alternativeText: String
  caption: String
  ext: String
  folder: ID
  folderPath: String
  formats: JSON
  hash: String
  height: Int
  mime: String
  name: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
  size: Float
  url: String
  width: Int
}

type UploadFileRelationResponseCollection {
  data: [UploadFileEntity!]!
}

type UploadFolder {
  children(filters: UploadFolderFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFolderRelationResponseCollection
  createdAt: DateTime
  files(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection
  name: String!
  parent: UploadFolderEntityResponse
  path: String!
  pathId: Int!
  updatedAt: DateTime
}

type UploadFolderEntity {
  attributes: UploadFolder
  id: ID
}

type UploadFolderEntityResponse {
  data: UploadFolderEntity
}

type UploadFolderEntityResponseCollection {
  data: [UploadFolderEntity!]!
  meta: ResponseCollectionMeta!
}

input UploadFolderFiltersInput {
  and: [UploadFolderFiltersInput]
  children: UploadFolderFiltersInput
  createdAt: DateTimeFilterInput
  files: UploadFileFiltersInput
  id: IDFilterInput
  name: StringFilterInput
  not: UploadFolderFiltersInput
  or: [UploadFolderFiltersInput]
  parent: UploadFolderFiltersInput
  path: StringFilterInput
  pathId: IntFilterInput
  updatedAt: DateTimeFilterInput
}

input UploadFolderInput {
  children: [ID]
  files: [ID]
  name: String
  parent: ID
  path: String
  pathId: Int
}

type UploadFolderRelationResponseCollection {
  data: [UploadFolderEntity!]!
}

type UsersPermissionsCreateRolePayload {
  ok: Boolean!
}

type UsersPermissionsDeleteRolePayload {
  ok: Boolean!
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String! = "local"
}

type UsersPermissionsLoginPayload {
  jwt: String
  user: UsersPermissionsMe!
}

type UsersPermissionsMe {
  blocked: Boolean
  confirmed: Boolean
  email: String
  id: ID!
  role: UsersPermissionsMeRole
  username: String!
}

type UsersPermissionsMeRole {
  description: String
  id: ID!
  name: String!
  type: String
}

type UsersPermissionsPasswordPayload {
  ok: Boolean!
}

type UsersPermissionsPermission {
  action: String!
  createdAt: DateTime
  role: UsersPermissionsRoleEntityResponse
  updatedAt: DateTime
}

type UsersPermissionsPermissionEntity {
  attributes: UsersPermissionsPermission
  id: ID
}

type UsersPermissionsPermissionEntityResponse {
  data: UsersPermissionsPermissionEntity
}

type UsersPermissionsPermissionEntityResponseCollection {
  data: [UsersPermissionsPermissionEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsPermissionFiltersInput {
  action: StringFilterInput
  and: [UsersPermissionsPermissionFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  not: UsersPermissionsPermissionFiltersInput
  or: [UsersPermissionsPermissionFiltersInput]
  role: UsersPermissionsRoleFiltersInput
  updatedAt: DateTimeFilterInput
}

input UsersPermissionsPermissionInput {
  action: String
  role: ID
}

type UsersPermissionsPermissionRelationResponseCollection {
  data: [UsersPermissionsPermissionEntity!]!
}

input UsersPermissionsRegisterInput {
  email: String!
  password: String!
  username: String!
}

type UsersPermissionsRole {
  createdAt: DateTime
  description: String
  name: String!
  permissions(filters: UsersPermissionsPermissionFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsPermissionRelationResponseCollection
  type: String
  updatedAt: DateTime
  users(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsUserRelationResponseCollection
}

type UsersPermissionsRoleEntity {
  attributes: UsersPermissionsRole
  id: ID
}

type UsersPermissionsRoleEntityResponse {
  data: UsersPermissionsRoleEntity
}

type UsersPermissionsRoleEntityResponseCollection {
  data: [UsersPermissionsRoleEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsRoleFiltersInput {
  and: [UsersPermissionsRoleFiltersInput]
  createdAt: DateTimeFilterInput
  description: StringFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: UsersPermissionsRoleFiltersInput
  or: [UsersPermissionsRoleFiltersInput]
  permissions: UsersPermissionsPermissionFiltersInput
  type: StringFilterInput
  updatedAt: DateTimeFilterInput
  users: UsersPermissionsUserFiltersInput
}

input UsersPermissionsRoleInput {
  description: String
  name: String
  permissions: [ID]
  type: String
  users: [ID]
}

type UsersPermissionsRoleRelationResponseCollection {
  data: [UsersPermissionsRoleEntity!]!
}

type UsersPermissionsUpdateRolePayload {
  ok: Boolean!
}

type UsersPermissionsUser {
  blocked: Boolean
  confirmed: Boolean
  createdAt: DateTime
  email: String!
  lastAttendanceDate: String
  provider: String
  role: UsersPermissionsRoleEntityResponse
  setting: SettingEntityResponse
  settings(filters: SettingFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): SettingRelationResponseCollection
  updatedAt: DateTime
  username: String!
}

type UsersPermissionsUserEntity {
  attributes: UsersPermissionsUser
  id: ID
}

type UsersPermissionsUserEntityResponse {
  data: UsersPermissionsUserEntity
}

type UsersPermissionsUserEntityResponseCollection {
  data: [UsersPermissionsUserEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsUserFiltersInput {
  and: [UsersPermissionsUserFiltersInput]
  blocked: BooleanFilterInput
  confirmationToken: StringFilterInput
  confirmed: BooleanFilterInput
  createdAt: DateTimeFilterInput
  email: StringFilterInput
  id: IDFilterInput
  lastAttendanceDate: StringFilterInput
  not: UsersPermissionsUserFiltersInput
  or: [UsersPermissionsUserFiltersInput]
  password: StringFilterInput
  provider: StringFilterInput
  resetPasswordToken: StringFilterInput
  role: UsersPermissionsRoleFiltersInput
  setting: SettingFiltersInput
  settings: SettingFiltersInput
  updatedAt: DateTimeFilterInput
  username: StringFilterInput
}

input UsersPermissionsUserInput {
  blocked: Boolean
  confirmationToken: String
  confirmed: Boolean
  email: String
  lastAttendanceDate: String
  password: String
  provider: String
  resetPasswordToken: String
  role: ID
  setting: ID
  settings: [ID]
  username: String
}

type UsersPermissionsUserRelationResponseCollection {
  data: [UsersPermissionsUserEntity!]!
}

type Variable {
  createdAt: DateTime
  prompt: PromptEntityResponse
  updatedAt: DateTime
}

type VariableEntity {
  attributes: Variable
  id: ID
}

type VariableEntityResponse {
  data: VariableEntity
}

type VariableEntityResponseCollection {
  data: [VariableEntity!]!
  meta: ResponseCollectionMeta!
}

input VariableFiltersInput {
  and: [VariableFiltersInput]
  createdAt: DateTimeFilterInput
  not: VariableFiltersInput
  or: [VariableFiltersInput]
  prompt: PromptFiltersInput
  updatedAt: DateTimeFilterInput
}

input VariableInput {
  prompt: ID
}

type VariableRelationResponseCollection {
  data: [VariableEntity!]!
}

type Word {
  active: Boolean
  createdAt: DateTime
  list: ListEntityResponse
  point: Long
  studied: Boolean
  translation: String
  updatedAt: DateTime
  word: String
}

type WordEntity {
  attributes: Word
  id: ID
}

type WordEntityResponse {
  data: WordEntity
}

type WordEntityResponseCollection {
  data: [WordEntity!]!
  meta: ResponseCollectionMeta!
}

input WordFiltersInput {
  active: BooleanFilterInput
  and: [WordFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  list: ListFiltersInput
  not: WordFiltersInput
  or: [WordFiltersInput]
  point: LongFilterInput
  studied: BooleanFilterInput
  translation: StringFilterInput
  updatedAt: DateTimeFilterInput
  word: StringFilterInput
}

input WordInput {
  active: Boolean
  list: ID
  point: Long
  studied: Boolean
  translation: String
  word: String
}

type WordRelationResponseCollection {
  data: [WordEntity!]!
}

input WordsListInput {
  name: String
  words: [WordInput]
}

input WordsPointListInput {
  id: ID
  point: Int
}
